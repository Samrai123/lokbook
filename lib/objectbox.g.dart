// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/category.dart';
import 'model/user.dart';
import 'model/visual.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7833304853780513268),
      name: 'Category',
      lastPropertyId: const IdUid(3, 869272274989982148),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9219341726474841975),
            name: 'categoryId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 1176090961191446739)),
        ModelProperty(
            id: const IdUid(2, 3473102428203332137),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 869272274989982148),
            name: 'id',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 4358591887171099164),
            name: 'visual',
            targetId: const IdUid(3, 214625825119749401))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'user', srcEntity: 'User', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 1778043269348404774),
      name: 'User',
      lastPropertyId: const IdUid(9, 3937542071868674961),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8129565931811394196),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 4662931185944076797)),
        ModelProperty(
            id: const IdUid(2, 813669719301187576),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8675208252336777295),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5484354222771601211),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3858221509167759295),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2523662494154779388),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3110527095192987087),
            name: 'uId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(9, 3937542071868674961),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2349829023543117133),
            name: 'category',
            targetId: const IdUid(1, 7833304853780513268))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 214625825119749401),
      name: 'Visual',
      lastPropertyId: const IdUid(5, 6196087706376009144),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8283447694164806019),
            name: 'vId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7102480984676927296),
            name: 'visualId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6592583412379438087)),
        ModelProperty(
            id: const IdUid(3, 4462793614819332180),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 597193445582522748),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6196087706376009144),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6211989545962352094),
            name: 'category',
            targetId: const IdUid(1, 7833304853780513268))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 214625825119749401),
      lastIndexId: const IdUid(3, 6592583412379438087),
      lastRelationId: const IdUid(3, 4358591887171099164),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8849096572590381187],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Category: EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              RelInfo<Category>.toMany(3, object.id): object.visual,
              RelInfo<User>.toManyBacklink(1, object.id): object.user
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryIdOffset = fbb.writeString(object.categoryId);
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(4);
          fbb.addOffset(0, categoryIdOffset);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 4, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          InternalToManyAccess.setRelInfo(object.visual, store,
              RelInfo<Category>.toMany(3, object.id), store.box<Category>());
          InternalToManyAccess.setRelInfo(
              object.user,
              store,
              RelInfo<User>.toManyBacklink(1, object.id),
              store.box<Category>());
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) =>
            {RelInfo<User>.toMany(1, object.uId): object.category},
        getId: (User object) => object.uId,
        setId: (User object, int id) {
          object.uId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(10);
          fbb.addOffset(0, userIdOffset);
          fbb.addOffset(1, fnameOffset);
          fbb.addOffset(2, lnameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, usernameOffset);
          fbb.addOffset(5, passwordOffset);
          fbb.addInt64(7, object.uId);
          fbb.addOffset(8, imageOffset);
          fbb.finish(fbb.endTable());
          return object.uId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 4),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              uId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          InternalToManyAccess.setRelInfo(object.category, store,
              RelInfo<User>.toMany(1, object.uId), store.box<User>());
          return object;
        }),
    Visual: EntityDefinition<Visual>(
        model: _entities[2],
        toOneRelations: (Visual object) => [],
        toManyRelations: (Visual object) =>
            {RelInfo<Visual>.toMany(2, object.vId): object.category},
        getId: (Visual object) => object.vId,
        setId: (Visual object, int id) {
          object.vId = id;
        },
        objectToFB: (Visual object, fb.Builder fbb) {
          final visualIdOffset = object.visualId == null
              ? null
              : fbb.writeString(object.visualId!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(6);
          fbb.addInt64(0, object.vId);
          fbb.addOffset(1, visualIdOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, titleOffset);
          fbb.finish(fbb.endTable());
          return object.vId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Visual(
              visualId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              vId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(object.category, store,
              RelInfo<Visual>.toMany(2, object.vId), store.box<Visual>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.categoryId]
  static final categoryId =
      QueryStringProperty<Category>(_entities[0].properties[0]);

  /// see [Category.categoryName]
  static final categoryName =
      QueryStringProperty<Category>(_entities[0].properties[1]);

  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[0].properties[2]);

  /// see [Category.visual]
  static final visual =
      QueryRelationToMany<Category, Visual>(_entities[0].relations[0]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[1].properties[0]);

  /// see [User.fname]
  static final fname = QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.lname]
  static final lname = QueryStringProperty<User>(_entities[1].properties[2]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[1].properties[3]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[1].properties[4]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[1].properties[5]);

  /// see [User.uId]
  static final uId = QueryIntegerProperty<User>(_entities[1].properties[6]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[1].properties[7]);

  /// see [User.category]
  static final category =
      QueryRelationToMany<User, Category>(_entities[1].relations[0]);
}

/// [Visual] entity fields to define ObjectBox queries.
class Visual_ {
  /// see [Visual.vId]
  static final vId = QueryIntegerProperty<Visual>(_entities[2].properties[0]);

  /// see [Visual.visualId]
  static final visualId =
      QueryStringProperty<Visual>(_entities[2].properties[1]);

  /// see [Visual.description]
  static final description =
      QueryStringProperty<Visual>(_entities[2].properties[2]);

  /// see [Visual.image]
  static final image = QueryStringProperty<Visual>(_entities[2].properties[3]);

  /// see [Visual.title]
  static final title = QueryStringProperty<Visual>(_entities[2].properties[4]);

  /// see [Visual.category]
  static final category =
      QueryRelationToMany<Visual, Category>(_entities[2].relations[0]);
}
